(function(window) {

  "use strict";
// Localize jQuery variable
  var jQuery,
    url = '<%= EVERCAM_API %>cameras/<%= params[:camera] %>/live/snapshot',
    container,
    refresh = 1000*<%= params[:refresh] %>,
    priv = <%= params[:private] %>;

  function updateImage() {
    if (refresh > 0) {
      window.ec_watcher = setTimeout(updateImage, refresh);
    }
    var img = new Image()
    var live_snapshot_url = url + '?' + new Date().getTime()

    img.onload = function(){
      if (!this.complete || this.naturalWidth === undefined || this.naturalWidth === 0) {
        //broken image!
      } else {
        //update image
        container.find('img').attr('src', live_snapshot_url);
      }
    };
    img.src = live_snapshot_url;
  }

  function handleVisibilityChange() {
    if (document.hidden) {
      clearTimeout(window.ec_watcher);
      console.log('stop');
    } else  {
      updateImage();
      console.log('start');
    }
  }

  /******** Our main function ********/
  function main() {
    jQuery(document).ready(function($) {
      /******* Load HTML *******/
      container = $('#ec-container-<%= params[:camera]%>');
      if (container.length == 0) {
        container = $('#ec-container');
      }
      if (priv) {
        var window_height = $(window).height();
        container.html('<iframe id="ec-frame" allowFullScreen style="width: 100%;min-height:' + window_height + 'px; height:100%;" src="<%= request.base_url %>/live.view.private.widget?camera=<%= params[:camera] %>&refresh=<%= params[:refresh] %>&api_id=<%= params[:api_id] %>&api_key=<%= params[:api_key] %>" frameborder="0" scrolling="no"/>');
        $('#ec-frame').load(function() {
          console.log($('#ec-frame').attr('src'));
        });
      } else {
        container.html("<img/>");
        updateImage();
        window.ec_vis_handler = handleVisibilityChange;
        document.addEventListener("visibilitychange", handleVisibilityChange, false);
      }
      fullscreenImage($,container.attr("id"));
    });
  }

  function fullscreenImage($,id) {
    $("#"+id+" img").dblclick(function(){
      screenfull.toggle($(this)[0]);
    });

    if (screenfull.enabled)
      document.addEventListener(screenfull.raw.fullscreenchange, function(){
        if (screenfull.isFullscreen) {
          $("#"+id+" img").css('width', 'auto')
        }
        else {
          $("#"+id+" img").css('width', '100%')
        }
      });
  }

  /******** Called once jQuery has loaded ******/
  function scriptLoadHandler() {
    // Restore $ and window.jQuery to their previous values and store the
    // new jQuery in our local jQuery variable
    jQuery = window.jQuery.noConflict(true);
    // Call our main function
    main();
  }

  /******** Load jQuery if not present *********/
  if (window.jQuery === undefined || window.jQuery.fn.jquery !== '2.1.1') {
    var script_tag = document.createElement('script');
    script_tag.setAttribute("type","text/javascript");
    script_tag.setAttribute("src",
      "https://code.jquery.com/jquery-2.1.3.min.js");
    if (script_tag.readyState) {
      script_tag.onreadystatechange = function () { // For old versions of IE
        if (this.readyState === 'complete' || this.readyState === 'loaded') {
          scriptLoadHandler();
        }
      };
    } else {
      script_tag.onload = scriptLoadHandler;
    }
    // Try to find the head, otherwise default to the documentElement
    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(script_tag);
  } else {
    // The jQuery version on the window is the one we want to use
    jQuery = window.jQuery;
    main();
  }

}(window));

(function () {
  'use strict';

  var isCommonjs = typeof module !== 'undefined' && module.exports;
  var keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;

  var fn = (function () {
    var val;
    var valLength;

    var fnMap = [
      [
        'requestFullscreen',
        'exitFullscreen',
        'fullscreenElement',
        'fullscreenEnabled',
        'fullscreenchange',
        'fullscreenerror'
      ],
      // new WebKit
      [
        'webkitRequestFullscreen',
        'webkitExitFullscreen',
        'webkitFullscreenElement',
        'webkitFullscreenEnabled',
        'webkitfullscreenchange',
        'webkitfullscreenerror'

      ],
      // old WebKit (Safari 5.1)
      [
        'webkitRequestFullScreen',
        'webkitCancelFullScreen',
        'webkitCurrentFullScreenElement',
        'webkitCancelFullScreen',
        'webkitfullscreenchange',
        'webkitfullscreenerror'

      ],
      [
        'mozRequestFullScreen',
        'mozCancelFullScreen',
        'mozFullScreenElement',
        'mozFullScreenEnabled',
        'mozfullscreenchange',
        'mozfullscreenerror'
      ],
      [
        'msRequestFullscreen',
        'msExitFullscreen',
        'msFullscreenElement',
        'msFullscreenEnabled',
        'MSFullscreenChange',
        'MSFullscreenError'
      ]
    ];

    var i = 0;
    var l = fnMap.length;
    var ret = {};

    for (; i < l; i++) {
      val = fnMap[i];
      if (val && val[1] in document) {
        for (i = 0, valLength = val.length; i < valLength; i++) {
          ret[fnMap[0][i]] = val[i];
        }
        return ret;
      }
    }

    return false;
  })();

  var screenfull = {
    request: function (elem) {
      var request = fn.requestFullscreen;

      elem = elem || document.documentElement;

      // Work around Safari 5.1 bug: reports support for
      // keyboard in fullscreen even though it doesn't.
      // Browser sniffing, since the alternative with
      // setTimeout is even worse.
      if (/5\.1[\.\d]* Safari/.test(navigator.userAgent)) {
        elem[request]();
      } else {
        elem[request](keyboardAllowed && Element.ALLOW_KEYBOARD_INPUT);
      }
    },
    exit: function () {
      document[fn.exitFullscreen]();
    },
    toggle: function (elem) {
      if (this.isFullscreen) {
        this.exit();
      } else {
        this.request(elem);
      }
    },
    raw: fn
  };

  if (!fn) {
    if (isCommonjs) {
      module.exports = false;
    } else {
      window.screenfull = false;
    }

    return;
  }

  Object.defineProperties(screenfull, {
    isFullscreen: {
      get: function () {
        return !!document[fn.fullscreenElement];
      }
    },
    element: {
      enumerable: true,
      get: function () {
        return document[fn.fullscreenElement];
      }
    },
    enabled: {
      enumerable: true,
      get: function () {
        // Coerce to boolean in case of old WebKit
        return !!document[fn.fullscreenEnabled];
      }
    }
  });

  if (isCommonjs) {
    module.exports = screenfull;
  } else {
    window.screenfull = screenfull;
  }
})();